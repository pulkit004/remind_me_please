{"version":3,"sources":["component/ReminderList/ReminderList.js","component/DatePicker/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["ReminderList","props","change","event","name","state","target","value","setState","add","item","location","time","reminderList","selectedDate","reminderListItems","computedObject","find","it","items","unshift","push","Locker","set","get","visible","this","className","title","centered","footer","onCancel","onChange","e","placeholder","type","onClick","xmlns","width","height","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","sort","a","b","map","index","key","dayjs","format","cx","cy","r","points","Component","todayTimestamp","Date","now","getTimezoneOffset","inputRef","React","createRef","MyDatePicker","addBackDrop","showDatePicker","ReactDOM","findDOMNode","contains","daysMap","monthMap","getDayDetails","args","date","firstDay","day","prevMonth","month","prevYear","year","prevMonthNumberOfDays","getNumberOfDays","_date","numberOfDays","timestamp","getTime","dayString","getDate","getMonthDetails","getDay","monthArray","currentDay","row","col","isCurrentDay","isSelectedDay","selectedDay","getDateFromDateString","dateValue","dateData","split","parseInt","length","getMonthStr","Math","max","min","getDateStringFromTimestamp","dateObject","getMonth","getFullYear","setDate","updateDateFromInput","current","monthDetails","setDateToInput","dateString","onDateClick","setYear","offset","setMonth","window","addEventListener","removeEventListener","days","i","ref","renderCalendar","console","log","App","Boolean","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bd6ee7f2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './ReminderList.css';\nimport {Button, Input, Modal} from 'antd';\nimport Locker from 'lockr';\nimport dayjs from 'dayjs';\n\nclass ReminderList extends Component {\n\n  constructor(props) {\n    super(props);\n    const reminderList = Locker.get('reminderList');\n    this.state = {\n      visible: false, item: '', reminderList: reminderList || [],\n    };\n  }\n\n  change = (event, name) => {\n    const {state} = this;\n    state[name] = event.target.value;\n    this.setState({\n      state,\n    });\n  };\n\n  add = () => {\n    const {item, location, time, reminderList} = this.state;\n    const {selectedDate} = this.props;\n    let reminderListItems = []\n    let computedObject = {}\n\n    if(reminderList?.find(it => it.selectedDate === selectedDate)){\n      let existingObject = reminderList?.find(it => it.selectedDate === selectedDate)\n      existingObject.items.unshift({item,location, time})\n\n    } else {\n      computedObject.selectedDate = selectedDate\n      reminderListItems.unshift({item, location, time})\n      computedObject.items = reminderListItems\n      reminderList.push(computedObject)\n    }\n    Locker.set('reminderList', reminderList);\n    this.setState({reminderList});\n  };\n\n  render() {\n    const {visible, item, reminderList, location, time} = this.state;\n\n    return (<div className='ReminderList'>\n      <Modal\n          title=\"Add new item to remember\"\n          visible={visible}\n          centered\n          footer={null}\n\n          onCancel={() => this.setState({visible: false})}\n      >\n        <div>\n          <span>Item</span>\n          <Input name={'item'} value={item} onChange={(e) => this.change(e, 'item')} placeholder=\"Meet Kunal at Bangalore HQ\" />\n\n          <div className=\"my-2\" />\n          <span>Location</span>\n\n          <Input name={'location'} value={location} onChange={(e) => this.change(e, 'location')} placeholder=\"Bangalore HQ\" />\n          <div className=\"my-2\" />\n\n          <span>Time</span>\n\n          <Input name={'time'} value={time} onChange={(e) => this.change(e, 'time')} placeholder=\"11\" />\n          <div className=\"my-2\" />\n\n          <Button type={'primary'} onClick={this.add}>Add</Button>\n        </div>\n      </Modal>\n      <div className=\"header\">\n        <div>\n\n        </div>\n        <div>\n               <span className={'cursor-pointer d-flex flex-row align-items-center  '} onClick={() => this.setState({visible: true})}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n  <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n</svg>\n                 <div className=\"px-1\" />\n                 Add new\n               </span>\n        </div>\n      </div>\n\n      <div className=\"list-body\">\n        <ul>\n          {reminderList?.sort((a,b) => b.selectedDate-a.selectedDate).map((it, index) => <li key={it?.name + `${index}`} className={'mb-2'}>\n            <p className={'lead'}>\n              {dayjs(it?.selectedDate).format('DD MMM')}\n            </p>\n            {\n              it?.items?.map(it => <div>\n                <p>\n                  {it?.name}\n                </p>\n                <p className={'d-flex flex-row align-items-center'}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n                    <circle cx=\"12\" cy=\"11\" r=\"3\" />\n                    <path d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 0 1 -2.827 0l-4.244-4.243a8 8 0 1 1 11.314 0z\" />\n                  </svg>\n                  <div className=\"px-1\"/>\n                  {it?.location}\n                </p>\n                <p className={'d-flex flex-row align-items-center'}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"15\" height=\"15\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n                    <circle cx=\"12\" cy=\"12\" r=\"9\" />\n                    <polyline points=\"12 7 12 12 15 15\" />\n                  </svg>\n                  <div className=\"px-1\"/>\n\n                  {it?.time}\n                </p>\n              </div>)\n            }\n          </li>)}\n        </ul>\n      </div>\n    </div>);\n  }\n}\n\nReminderList.propTypes = {};\n\nexport default ReminderList;","\nimport React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './DatePicker.css';\nimport ReminderList from '../ReminderList/ReminderList';\n\nlet oneDay = 60 * 60 * 24 * 1000;\nlet todayTimestamp = Date.now() - (Date.now() % oneDay) + (new Date().getTimezoneOffset() * 1000 * 60);\nlet inputRef = React.createRef();\n\nexport default class MyDatePicker extends Component {\n\n    constructor() {\n        super();\n        let date = new Date();\n        let year = date.getFullYear();\n        let month = date.getMonth();\n        this.state = {\n            getMonthDetails: [],\n            year,\n            month,\n            selectedDay: todayTimestamp,\n            monthDetails: this.getMonthDetails(year, month)\n        }\n    }\n\n    componentDidMount() {\n        window.addEventListener('click', this.addBackDrop);\n        this.setDateToInput(this.state.selectedDay);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.addBackDrop);\n    }\n\n    addBackDrop =e=> {\n        if(this.state.showDatePicker && !ReactDOM.findDOMNode(this).contains(e.target)) {\n            this.showDatePicker(false);\n        }\n    }\n\n    showDatePicker =(showDatePicker=true)=> {\n        this.setState({ showDatePicker })\n    }\n\n    /**\n     *  Core\n     */\n\n    daysMap = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    monthMap = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    \n    getDayDetails =args=> {\n        let date = args.index - args.firstDay; \n        let day = args.index%7;\n        let prevMonth = args.month-1;\n        let prevYear = args.year;\n        if(prevMonth < 0) {\n            prevMonth = 11;\n            prevYear--;\n        }\n        let prevMonthNumberOfDays = this.getNumberOfDays(prevYear, prevMonth);\n        let _date = (date < 0 ? prevMonthNumberOfDays+date : date % args.numberOfDays) + 1;\n        let month = date < 0 ? -1 : date >= args.numberOfDays ? 1 : 0;\n        let timestamp = new Date(args.year, args.month, _date).getTime();\n        return {\n            date: _date,\n            day,\n            month, \n            timestamp,\n            dayString: this.daysMap[day]\n        }\n    }\n\n    getNumberOfDays =(year, month)=> {\n        return 40 - new Date(year, month, 40).getDate();\n    }\n\n    getMonthDetails =(year, month)=> {\n        let firstDay = (new Date(year, month)).getDay();\n        let numberOfDays = this.getNumberOfDays(year, month);\n        let monthArray = [];\n        let rows = 6;\n        let currentDay = null;\n        let index = 0; \n        let cols = 7;\n\n        for(let row=0; row<rows; row++) {\n            for(let col=0; col<cols; col++) { \n                currentDay = this.getDayDetails({\n                    index,\n                    numberOfDays,\n                    firstDay,\n                    year,\n                    month\n                });\n                monthArray.push(currentDay);\n                index++;\n            }\n        }\n        return monthArray;\n    }\n\n    isCurrentDay =day=> {\n        return day.timestamp === todayTimestamp;\n    }\n\n    isSelectedDay =day=> {\n        return day.timestamp === this.state.selectedDay;\n    }\n\n    getDateFromDateString =dateValue=> {\n        let dateData = dateValue.split('-').map(d=>parseInt(d, 10));\n        if(dateData.length < 3) \n            return null;\n\n        let year = dateData[0];\n        let month = dateData[1];\n        let date = dateData[2];\n        return {year, month, date};\n    }\n\n    getMonthStr =month=> this.monthMap[Math.max(Math.min(11, month), 0)] || 'Month';\n\n    getDateStringFromTimestamp =timestamp=> {\n        let dateObject = new Date(timestamp);\n        let month = dateObject.getMonth()+1;\n        let date = dateObject.getDate();\n        return dateObject.getFullYear() + '-' + (month < 10 ? '0'+month : month) + '-' + (date < 10 ? '0'+date : date);\n    }\n\n    setDate =dateData=> {\n        let selectedDay = new Date(dateData.year, dateData.month-1, dateData.date).getTime();\n        this.setState({ selectedDay })\n        if(this.props.onChange) {\n            this.props.onChange(selectedDay);\n        }\n    }\n\n    updateDateFromInput =()=> {\n        let dateValue = inputRef.current.value;\n        let dateData = this.getDateFromDateString(dateValue);\n        if(dateData !== null) { \n            this.setDate(dateData);\n            this.setState({ \n                year: dateData.year, \n                month: dateData.month-1, \n                monthDetails: this.getMonthDetails(dateData.year, dateData.month-1)\n            })\n        }\n    }\n\n    setDateToInput =(timestamp)=> {\n        let dateString = this.getDateStringFromTimestamp(timestamp);\n        inputRef.current.value = dateString;\n    }\n\n    onDateClick = day => {\n        this.setState({selectedDay: day.timestamp}, ()=>this.setDateToInput(day.timestamp));\n        if(this.props.onChange) {\n            this.props.onChange(day.timestamp);\n        }\n    }\n\n    setYear =offset=> {\n        let year = this.state.year + offset;\n        let month = this.state.month;\n        this.setState({ \n            year,\n            monthDetails: this.getMonthDetails(year, month)\n        })\n    }\n\n    setMonth =offset=> {\n        let year = this.state.year;\n        let month = this.state.month + offset;\n        if(month === -1) {\n            month = 11;\n            year--;\n        } else if(month === 12) {\n            month = 0;\n            year++;\n        }\n        this.setState({ \n            year, \n            month,\n            monthDetails: this.getMonthDetails(year, month)\n        })\n    }\n\n\n    renderCalendar() {\n        let days = this.state.monthDetails.map((day, index)=> {\n            return (\n                <div className={'c-day-container ' + (day.month !== 0 ? ' disabled' : '') + \n                    (this.isCurrentDay(day) ? ' highlight' : '') + (this.isSelectedDay(day) ? ' highlight-green' : '')} key={index}>\n                    <div className='cdc-day'>\n                        <span onClick={()=>this.onDateClick(day)}>\n                            {day.date}\n                        </span>\n                    </div>\n                </div>\n            )\n        })\n\n        return (\n            <div className='c-container'>\n                <div className='cc-head'>\n                    {['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].map((d,i)=><div key={i} className='cch-name'>{d}</div>)}\n                </div>\n                <div className='cc-body'>\n                    {days}\n                </div>\n            </div>\n        )\n    }\n\n    render() {\n        return (\n            <div className='MyDatePicker'>\n                <div className='mdp-input' onClick={()=> this.showDatePicker(true)}>\n                    <input type='date' onChange={this.updateDateFromInput} ref={inputRef}/>\n                </div>\n                <div className='mdp-container'>\n                        <div className='mdpc-head'>\n                            <div className='mdpch-button'>\n                                <div className='mdpchb-inner' onClick={()=> this.setYear(-1)}>\n                                    <span className='mdpchbi-left-arrows'></span>\n                                </div>\n                            </div>\n                            <div className='mdpch-button'>\n                                <div className='mdpchb-inner' onClick={()=> this.setMonth(-1)}>\n                                    <span className='mdpchbi-left-arrow'></span>\n                                </div>\n                            </div>\n                            <div className='mdpch-container'>\n                                <div className='mdpchc-year'>{this.state.year}</div>\n                                <div className='mdpchc-month'>{this.getMonthStr(this.state.month)}</div>\n                            </div>\n                            <div className='mdpch-button'>\n                                <div className='mdpchb-inner' onClick={()=> this.setMonth(1)}>\n                                    <span className='mdpchbi-right-arrow' />\n                                </div>\n                            </div>\n                            <div className='mdpch-button' onClick={()=> this.setYear(1)}>\n                                <div className='mdpchb-inner'>\n                                    <span className='mdpchbi-right-arrows' />\n                                </div>\n                            </div>\n                        </div>\n                        <div className='mdpc-body'>\n                            {this.renderCalendar()}\n                            \n                        </div>\n\n                    </div>\n                            <ReminderList selectedDate={this.state.selectedDay} />\n\n\n            </div>\n        )\n    }\n\n}\n","import React from 'react';\nimport './App.css';\nimport DatePicker from './component/DatePicker/DatePicker';\n\nfunction onChange(timestamp) {\n  console.log(timestamp);\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <DatePicker onChange={onChange}/>\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}