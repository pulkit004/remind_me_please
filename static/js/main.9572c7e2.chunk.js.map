{"version":3,"sources":["component/ReminderList/ReminderList.js","component/DatePicker/DatePicker.js","App.js","serviceWorker.js","index.js"],"names":["ReminderList","props","change","event","name","state","target","value","setState","openNotificationWithIcon","type","date","notification","message","description","dayjs","format","add","item","location","time","reminderList","selectedDate","reminderListItems","computedObject","find","it","items","unshift","push","Locker","set","visible","get","this","className","title","centered","footer","onCancel","onChange","e","placeholder","onClick","xmlns","width","height","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","sort","a","b","map","index","key","cx","cy","r","points","Component","todayTimestamp","Date","now","getTimezoneOffset","inputRef","React","createRef","MyDatePicker","daysMap","monthMap","addBackDrop","showDatePicker","ReactDOM","findDOMNode","contains","getDayDetails","args","firstDay","day","prevMonth","month","prevYear","year","prevMonthNumberOfDays","getNumberOfDays","_date","numberOfDays","timestamp","getTime","dayString","getDate","getMonthDetails","getDay","monthArray","currentDay","row","col","isCurrentDay","isSelectedDay","selectedDay","getDateFromDateString","dateValue","dateData","split","parseInt","length","getMonthStr","Math","max","min","getDateStringFromTimestamp","dateObject","getMonth","getFullYear","setDate","updateDateFromInput","current","monthDetails","setDateToInput","dateString","onDateClick","setYear","offset","setMonth","prevProps","prevState","snapshot","window","addEventListener","removeEventListener","days","style","background","color","i","ref","renderCalendar","console","log","App","Boolean","hostname","match","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"kSA+IeA,E,kDAtIb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAORC,OAAS,SAACC,EAAOC,GAAU,IAClBC,EADiB,eACjBA,MACPA,EAAMD,GAAQD,EAAMG,OAAOC,MAC3B,EAAKC,SAAS,CACZH,WAZe,EAgBnBI,yBAA2B,SAACC,EAAMC,GAChCC,IAAaF,GAAM,CACjBG,QAAS,+BACTC,YAAY,qBAAD,OACcC,IAAMJ,GAAMK,OAAO,eADjC,8BAnBI,EAyBnBC,IAAM,WAAO,IAAD,EACmC,EAAKZ,MAA3Ca,EADG,EACHA,KAAMC,EADH,EACGA,SAAUC,EADb,EACaA,KAAMC,EADnB,EACmBA,aACtBC,EAAgB,EAAKrB,MAArBqB,aACHC,EAAoB,GACpBC,EAAiB,IAErB,OAAGH,QAAH,IAAGA,OAAH,EAAGA,EAAcI,MAAK,SAAAC,GAAE,OAAIA,EAAGJ,eAAiBA,OAC5B,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAcI,MAAK,SAAAC,GAAE,OAAIA,EAAGJ,eAAiBA,MACnDK,MAAMC,QAAQ,CAACV,OAAKC,WAAUC,UAG7CI,EAAeF,aAAeA,EAC9BC,EAAkBK,QAAQ,CAACV,OAAMC,WAAUC,SAC3CI,EAAeG,MAAQJ,EACvBF,EAAaQ,KAAKL,IAEpBM,IAAOC,IAAI,eAAgBV,GAC3B,EAAKb,SAAS,CAACa,eAAcW,SAAS,IACtC,EAAKvB,yBAAyB,UAAWa,IAzCzC,IAAMD,EAAeS,IAAOG,IAAI,gBAFf,OAGjB,EAAK5B,MAAQ,CACX2B,SAAS,EAAOd,KAAM,GAAIG,aAAcA,GAAgB,IAJzC,E,qDA8CT,IAAD,SAC+Ca,KAAK7B,MAApD2B,EADA,EACAA,QAASd,EADT,EACSA,KAAMG,EADf,EACeA,aAAcF,EAD7B,EAC6BA,SAAUC,EADvC,EACuCA,KAE9C,OAAQ,yBAAKe,UAAU,gBACrB,kBAAC,IAAD,CACIC,MAAK,uCAAkCrB,IAAMmB,KAAKjC,MAAMqB,cAAcN,OAAO,iBAC7EgB,QAASA,EACTK,UAAQ,EACRC,OAAQ,KAERC,SAAU,kBAAM,EAAK/B,SAAS,CAACwB,SAAS,MAE1C,6BACE,sCACA,kBAAC,IAAD,CAAO5B,KAAM,OAAQG,MAAOW,EAAMsB,SAAU,SAACC,GAAD,OAAO,EAAKvC,OAAOuC,EAAG,SAASC,YAAY,+BAEvF,yBAAKP,UAAU,SACf,0CAEA,kBAAC,IAAD,CAAO/B,KAAM,WAAYG,MAAOY,EAAUqB,SAAU,SAACC,GAAD,OAAO,EAAKvC,OAAOuC,EAAG,aAAaC,YAAY,iBACnG,yBAAKP,UAAU,SAEf,sCAEA,kBAAC,IAAD,CAAO/B,KAAM,OAAQG,MAAOa,EAAMoB,SAAU,SAACC,GAAD,OAAO,EAAKvC,OAAOuC,EAAG,SAASC,YAAY,OACvF,yBAAKP,UAAU,SAEf,kBAAC,IAAD,CAAQzB,KAAM,UAAWiC,QAAST,KAAKjB,KAAvC,qBAGJ,yBAAKkB,UAAU,UACb,8BAGA,6BACO,0BAAMA,UAAW,oDAAqDQ,QAAS,kBAAM,EAAKnC,SAAS,CAACwB,SAAS,MAC1G,yBAAKY,MAAM,6BAA6BT,UAAU,uCAAuCU,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,YAAY,MAAMC,OAAO,OAAOC,KAAK,OAAOC,cAAc,QAAQC,eAAe,SACrO,0BAAMH,OAAO,OAAOI,EAAE,kBACtB,0BAAMC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KAAKC,GAAG,OAChC,0BAAMH,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,QAEjB,yBAAKtB,UAAU,SANjB,aAYT,yBAAKA,UAAU,aACb,mCACGd,QADH,IACGA,OADH,EACGA,EAAcqC,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAEtC,aAAaqC,EAAErC,gBAAcuC,KAAI,SAACnC,EAAIoC,GAAL,aAAe,wBAAIC,KAAO,OAAFrC,QAAE,IAAFA,OAAA,EAAAA,EAAItB,MAAJ,UAAc0D,GAAS3B,UAAW,QACxH,uBAAGA,UAAW,QACXpB,IAAK,OAACW,QAAD,IAACA,OAAD,EAACA,EAAIJ,cAAcN,OAAO,eAF2C,OAK3EU,QAL2E,IAK3EA,GAL2E,UAK3EA,EAAIC,aALuE,aAK3E,EAAWkC,KAAI,SAAAnC,GAAE,OAAI,yBAAKS,UAAW,QACnC,kCACGT,QADH,IACGA,OADH,EACGA,EAAIR,MAEP,uBAAGiB,UAAW,sCACZ,yBAAKS,MAAM,6BAA6BT,UAAU,uCAAuCU,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,YAAY,MAAMC,OAAO,OAAOC,KAAK,OAAOC,cAAc,QAAQC,eAAe,SACnN,0BAAMH,OAAO,OAAOI,EAAE,kBACtB,4BAAQW,GAAG,KAAKC,GAAG,KAAKC,EAAE,MAC1B,0BAAMb,EAAE,4FAEV,yBAAKlB,UAAU,SANjB,OAOGT,QAPH,IAOGA,OAPH,EAOGA,EAAIP,UAEP,uBAAGgB,UAAW,sCACZ,yBAAKS,MAAM,6BAA6BT,UAAU,uCAAuCU,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,YAAY,MAAMC,OAAO,OAAOC,KAAK,OAAOC,cAAc,QAAQC,eAAe,SACnN,0BAAMH,OAAO,OAAOI,EAAE,kBACtB,4BAAQW,GAAG,KAAKC,GAAG,KAAKC,EAAE,MAC1B,8BAAUC,OAAO,sBAEnB,yBAAKhC,UAAU,SANjB,OAQGT,QARH,IAQGA,OARH,EAQGA,EAAIN,qB,GA3HIgD,a,SCCvBC,EAAiBC,KAAKC,MAASD,KAAKC,MAD3B,MAC+E,KAAjC,IAAID,MAAOE,oBAA6B,GAC/FC,EAAWC,IAAMC,YAEAC,E,kDAqBnB,aAAe,IAAD,uBACZ,gBAhBFC,QAAU,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAe/D,EAddC,SAAW,CACT,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEY,EAgCdC,YAAc,SAAAtC,GACR,EAAKpC,MAAM2E,iBAAmBC,IAASC,YAAT,gBAA2BC,SAAS1C,EAAEnC,SACtE,EAAK0E,gBAAe,IAlCV,EAsCdA,eAAiB,WAA4B,IAA3BA,IAA0B,yDAC1C,EAAKxE,SAAS,CAACwE,oBAvCH,EA0CdI,cAAgB,SAAAC,GACd,IAAI1E,EAAO0E,EAAKvB,MAAQuB,EAAKC,SACzBC,EAAMF,EAAKvB,MAAQ,EACnB0B,EAAYH,EAAKI,MAAQ,EACzBC,EAAWL,EAAKM,KAChBH,EAAY,IACdA,EAAY,GACZE,KAEF,IAAIE,EAAwB,EAAKC,gBAAgBH,EAAUF,GACvDM,GAASnF,EAAO,EAAIiF,EAAwBjF,EAAOA,EAAO0E,EAAKU,cAAgB,EAGnF,MAAO,CACLpF,KAAMmF,EAAOP,MAAKE,MAHR9E,EAAO,GAAK,EAAIA,GAAQ0E,EAAKU,aAAe,EAAI,EAGjCC,UAFX,IAAI1B,KAAKe,EAAKM,KAAMN,EAAKI,MAAOK,GAAOG,UAEjBC,UAAW,EAAKrB,QAAQU,KAxDlD,EA4DdM,gBAAkB,SAACF,EAAMF,GACvB,OAAO,GAAK,IAAInB,KAAKqB,EAAMF,EAAO,IAAIU,WA7D1B,EAgEdC,gBAAkB,SAACT,EAAMF,GASvB,IARA,IAAIH,EAAY,IAAIhB,KAAKqB,EAAMF,GAAQY,SACnCN,EAAe,EAAKF,gBAAgBF,EAAMF,GAC1Ca,EAAa,GAEbC,EAAa,KACbzC,EAAQ,EAGH0C,EAAM,EAAGA,EALP,EAKmBA,IAC5B,IAAK,IAAIC,EAAM,EAAGA,EAHT,EAGqBA,IAC5BF,EAAa,EAAKnB,cAAc,CAC9BtB,QAAOiC,eAAcT,WAAUK,OAAMF,UAEvCa,EAAWzE,KAAK0E,GAChBzC,IAGJ,OAAOwC,GAlFK,EAqFdI,aAAe,SAAAnB,GACb,OAAOA,EAAIS,YAAc3B,GAtFb,EAyFdsC,cAAgB,SAAApB,GACd,OAAOA,EAAIS,YAAc,EAAK3F,MAAMuG,aA1FxB,EA6FdC,sBAAwB,SAAAC,GACtB,IAAIC,EAAWD,EAAUE,MAAM,KAAKnD,KAAI,SAAAR,GAAC,OAAI4D,SAAS5D,EAAG,OACzD,OAAI0D,EAASG,OAAS,EAAU,KAKzB,CAACvB,KAHGoB,EAAS,GAGNtB,MAFFsB,EAAS,GAEApG,KADVoG,EAAS,KAnGR,EAuGdI,YAAc,SAAA1B,GAAK,OAAI,EAAKX,SAASsC,KAAKC,IAAID,KAAKE,IAAI,GAAI7B,GAAQ,KAAO,SAvG5D,EAyGd8B,2BAA6B,SAAAvB,GAC3B,IAAIwB,EAAa,IAAIlD,KAAK0B,GACtBP,EAAQ+B,EAAWC,WAAa,EAChC9G,EAAO6G,EAAWrB,UACtB,OAAOqB,EAAWE,cAAgB,KAAOjC,EAAQ,GAAK,IAAMA,EAAQA,GAAS,KAAO9E,EAAO,GAAK,IAAMA,EAAOA,IA7GjG,EAgHdgH,QAAU,SAAAZ,GACR,IAAIH,EAAc,IAAItC,KAAKyC,EAASpB,KAAMoB,EAAStB,MAAQ,EAAGsB,EAASpG,MAAMsF,UAC7E,EAAKzF,SAAS,CAACoG,gBACX,EAAK3G,MAAMuC,UACb,EAAKvC,MAAMuC,SAASoE,IApHV,EAwHdgB,oBAAsB,WACpB,IAAId,EAAYrC,EAASoD,QAAQtH,MAC7BwG,EAAW,EAAKF,sBAAsBC,GACzB,OAAbC,IACF,EAAKY,QAAQZ,GACb,EAAKvG,SAAS,CACZmF,KAAMoB,EAASpB,KACfF,MAAOsB,EAAStB,MAAQ,EACxBqC,aAAc,EAAK1B,gBAAgBW,EAASpB,KAAMoB,EAAStB,MAAQ,OAhI3D,EAqIdsC,eAAiB,SAAC/B,GAChB,IAAIgC,EAAa,EAAKT,2BAA2BvB,GACjDvB,EAASoD,QAAQtH,MAAQyH,GAvIb,EA0IdC,YAAc,SAAA1C,GACZ,EAAK/E,SAAS,CAACoG,YAAarB,EAAIS,YAAY,kBAAM,EAAK+B,eAAexC,EAAIS,cACtE,EAAK/F,MAAMuC,UACb,EAAKvC,MAAMuC,SAAS+C,EAAIS,YA7Id,EAiJdkC,QAAU,SAAAC,GACR,IAAIxC,EAAO,EAAKtF,MAAMsF,KAAOwC,EACzB1C,EAAQ,EAAKpF,MAAMoF,MACvB,EAAKjF,SAAS,CACZmF,OAAMmC,aAAc,EAAK1B,gBAAgBT,EAAMF,MArJrC,EAyJd2C,SAAW,SAAAD,GACT,IAAIxC,EAAO,EAAKtF,MAAMsF,KAClBF,EAAQ,EAAKpF,MAAMoF,MAAQ0C,GAChB,IAAX1C,GACFA,EAAQ,GACRE,KACmB,KAAVF,IACTA,EAAQ,EACRE,KAEF,EAAKnF,SAAS,CACZmF,OAAMF,QAAOqC,aAAc,EAAK1B,gBAAgBT,EAAMF,MAlKxD,IAAI9E,EAAO,IAAI2D,KACXqB,EAAOhF,EAAK+G,cACZjC,EAAQ9E,EAAK8G,WAJL,OAKZ,EAAKpH,MAAQ,CACX+F,gBAAiB,GACjBT,OACAF,QACAmB,YAAavC,EACbyD,aAAc,EAAK1B,gBAAgBT,EAAMF,GACzCpE,aAAcS,IAAOG,IAAI,iBAAmB,IAXlC,E,+DAeKoG,EAAWC,EAAWC,GACpCD,EAAUjH,eAAiBa,KAAK7B,MAAMgB,cACvCa,KAAK1B,SAAS,CACZa,aAAcS,IAAOG,IAAI,oB,0CAM7BuG,OAAOC,iBAAiB,QAASvG,KAAK6C,aACtC7C,KAAK6F,eAAe7F,KAAK7B,MAAMuG,e,6CAI/B4B,OAAOE,oBAAoB,QAASxG,KAAK6C,e,uCA2IzB,IAAD,OACX4D,EAAOzG,KAAK7B,MAAMyH,aAAajE,KAAI,SAAC0B,EAAKzB,GAAW,IAAD,QACrD,OAAQ,oCACN,yBAAK3B,UAAW,oBAAoC,IAAdoD,EAAIE,MAAc,YAAc,KAAO,EAAKiB,aAAanB,GAAO,aAAe,KAAO,EAAKoB,cAAcpB,GAAO,mBAAqB,IAAKxB,IAAKD,GACnL,yBAAK3B,UAAU,WACb,0BAAMA,UAAW,SAAUQ,QAAS,kBAAM,EAAKsF,YAAY1C,KACtDA,EAAI5E,MAGT,6BACC,4BACG,YAAKN,MAAMgB,aAAaI,MAAK,SAAAC,GAAE,OAAIA,EAAGJ,eAAiBiE,EAAIS,oBAA3D,mBAAuErE,aAAvE,eAA8EuF,QAAS,GAAK,kBAAC,IAAD,CAAS0B,MAAO,CAACC,WAAY,cAAeC,MAAO,QAAS1G,MAAO,uCAC7J,EAAK/B,MAAMgB,aAAaI,MAAK,SAAAC,GAAE,OAAIA,EAAGJ,eAAiBiE,EAAIS,oBADkG,iBAC7J,EAAuErE,aADsF,aAC7J,EAA8EkC,KAAI,SAAAnC,GAAE,OAAK,yBAAKS,UAAW,QACxG,kCACGT,QADH,IACGA,OADH,EACGA,EAAIR,MAEP,uBAAGiB,UAAW,sCACZ,yBAAKS,MAAM,6BAA6BT,UAAU,uCAAuCU,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,YAAY,MAAMC,OAAO,OAAOC,KAAK,OAAOC,cAAc,QAAQC,eAAe,SACnN,0BAAMH,OAAO,OAAOI,EAAE,kBACtB,4BAAQW,GAAG,KAAKC,GAAG,KAAKC,EAAE,MAC1B,0BAAMb,EAAE,4FAEV,yBAAKlB,UAAU,SANjB,OAOGT,QAPH,IAOGA,OAPH,EAOGA,EAAIP,UAEP,uBAAGgB,UAAW,sCACZ,yBAAKS,MAAM,6BAA6BT,UAAU,uCAAuCU,MAAM,KAAKC,OAAO,KAAKC,QAAQ,YAAYC,YAAY,MAAMC,OAAO,OAAOC,KAAK,OAAOC,cAAc,QAAQC,eAAe,SACnN,0BAAMH,OAAO,OAAOI,EAAE,kBACtB,4BAAQW,GAAG,KAAKC,GAAG,KAAKC,EAAE,MAC1B,8BAAUC,OAAO,sBAEnB,yBAAKhC,UAAU,SANjB,OAQGT,QARH,IAQGA,OARH,EAQGA,EAAIN,YAIT,0BAAMwH,MAAO,CAACC,WAAY,cAAeC,MAAO,SAC5B,EAAKzI,MAAMgB,aAAaI,MAAK,SAAAC,GAAE,OAAIA,EAAGJ,eAAiBiE,EAAIS,aAAa,MAAQ,YAajH,OAAQ,yBAAK7D,UAAU,eACrB,yBAAKA,UAAU,WACZ,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAO0B,KAAI,SAACR,EAAG0F,GAAJ,OAAU,yBAAKhF,IAAKgF,EAAG5G,UAAU,YAAYkB,OAEtG,yBAAKlB,UAAU,WACZwG,M,+BAKG,IAAD,OACP,OAAQ,yBAAKxG,UAAU,gBACrB,yBAAKA,UAAU,YAAYQ,QAAS,kBAAM,EAAKqC,gBAAe,KAC5D,2BAAOtE,KAAK,OAAO8B,SAAUN,KAAK0F,oBAAqBoB,IAAKvE,KAE9D,yBAAKtC,UAAU,iBACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eAAeQ,QAAS,kBAAM,EAAKuF,SAAS,KACzD,0BAAM/F,UAAU,0BAGpB,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eAAeQ,QAAS,kBAAM,EAAKyF,UAAU,KAC1D,0BAAMjG,UAAU,yBAGpB,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,eAAeD,KAAK7B,MAAMsF,MACzC,yBAAKxD,UAAU,gBAAgBD,KAAKiF,YAAYjF,KAAK7B,MAAMoF,SAE7D,yBAAKtD,UAAU,gBACb,yBAAKA,UAAU,eAAeQ,QAAS,kBAAM,EAAKyF,SAAS,KACzD,0BAAMjG,UAAU,0BAGpB,yBAAKA,UAAU,eAAeQ,QAAS,kBAAM,EAAKuF,QAAQ,KACxD,yBAAK/F,UAAU,gBACb,0BAAMA,UAAU,4BAItB,yBAAKA,UAAU,aACZD,KAAK+G,mBAKV,kBAAC,EAAD,CAAc3H,aAAcY,KAAK7B,MAAMuG,mB,GAhSHxC,aCP1C,SAAS5B,EAASwD,GAChBkD,QAAQC,IAAInD,GAeCoD,MAXf,WACE,OACE,yBAAKjH,UAAU,OAEb,kBAAC,EAAD,CAAYK,SAAUA,MCDR6G,QACW,cAA7Bb,OAAOrH,SAASmI,UAEe,UAA7Bd,OAAOrH,SAASmI,UAEhBd,OAAOrH,SAASmI,SAASC,MACvB,2D,OCXNtE,IAASuE,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMtJ,a","file":"static/js/main.9572c7e2.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './ReminderList.css';\nimport {Button, Input, Modal, notification} from 'antd';\nimport Locker from 'lockr';\nimport dayjs from 'dayjs';\n\n\nclass ReminderList extends Component {\n\n  constructor(props) {\n    super(props);\n    const reminderList = Locker.get('reminderList');\n    this.state = {\n      visible: false, item: '', reminderList: reminderList || [],\n    };\n  }\n\n  change = (event, name) => {\n    const {state} = this;\n    state[name] = event.target.value;\n    this.setState({\n      state,\n    });\n  };\n\n  openNotificationWithIcon = (type, date) => {\n    notification[type]({\n      message: 'Reminder added successfully!',\n      description:\n          `Your reminder for ${dayjs(date).format('MMM  DD, YY')} is added successfully.`,\n    });\n  };\n\n\n  add = () => {\n    const {item, location, time, reminderList} = this.state;\n    const {selectedDate} = this.props;\n    let reminderListItems = []\n    let computedObject = {}\n\n    if(reminderList?.find(it => it.selectedDate === selectedDate)){\n      let existingObject = reminderList?.find(it => it.selectedDate === selectedDate)\n      existingObject.items.unshift({item,location, time})\n\n    } else {\n      computedObject.selectedDate = selectedDate\n      reminderListItems.unshift({item, location, time})\n      computedObject.items = reminderListItems\n      reminderList.push(computedObject)\n    }\n    Locker.set('reminderList', reminderList);\n    this.setState({reminderList, visible: false});\n    this.openNotificationWithIcon('success', selectedDate)\n  };\n\n  render() {\n    const {visible, item, reminderList, location, time} = this.state;\n\n    return (<div className='ReminderList'>\n      <Modal\n          title={`Add new item to remember for ${dayjs(this.props.selectedDate).format('MMM DD, YYYY')}`}\n          visible={visible}\n          centered\n          footer={null}\n\n          onCancel={() => this.setState({visible: false})}\n      >\n        <div>\n          <span>Item</span>\n          <Input name={'item'} value={item} onChange={(e) => this.change(e, 'item')} placeholder=\"Meet Kunal at Bangalore HQ\" />\n\n          <div className=\"my-2\" />\n          <span>Location</span>\n\n          <Input name={'location'} value={location} onChange={(e) => this.change(e, 'location')} placeholder=\"Bangalore HQ\" />\n          <div className=\"my-2\" />\n\n          <span>Time</span>\n\n          <Input name={'time'} value={time} onChange={(e) => this.change(e, 'time')} placeholder=\"11\" />\n          <div className=\"my-2\" />\n\n          <Button type={'primary'} onClick={this.add}>Add to remember</Button>\n        </div>\n      </Modal>\n      <div className=\"header\">\n        <div>\n\n        </div>\n        <div>\n               <span className={'cursor-pointer d-flex flex-row align-items-center'} onClick={() => this.setState({visible: true})}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"13\" height=\"13\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n  <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n  <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n  <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n</svg>\n                 <div className=\"px-1\" />\n                 Add new\n               </span>\n        </div>\n      </div>\n\n      <div className=\"list-body\">\n        <ul>\n          {reminderList?.sort((a,b) => b.selectedDate-a.selectedDate).map((it, index) => <li key={it?.name + `${index}`} className={'mb-2'}>\n            <p className={'lead'}>\n              {dayjs(it?.selectedDate).format('DD MMM, YY')}\n            </p>\n            {\n              it?.items?.map(it => <div className={'mb-2'}>\n                <p>\n                  {it?.item}\n                </p>\n                <p className={'d-flex flex-row align-items-center'}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"13\" height=\"13\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n                    <circle cx=\"12\" cy=\"11\" r=\"3\" />\n                    <path d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 0 1 -2.827 0l-4.244-4.243a8 8 0 1 1 11.314 0z\" />\n                  </svg>\n                  <div className=\"px-1\"/>\n                  {it?.location}\n                </p>\n                <p className={'d-flex flex-row align-items-center'}>\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"13\" height=\"13\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n                    <circle cx=\"12\" cy=\"12\" r=\"9\" />\n                    <polyline points=\"12 7 12 12 15 15\" />\n                  </svg>\n                  <div className=\"px-1\"/>\n\n                  {it?.time}\n                </p>\n              </div>)\n            }\n          </li>)}\n        </ul>\n      </div>\n    </div>);\n  }\n}\n\nReminderList.propTypes = {};\n\nexport default ReminderList;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './DatePicker.css';\nimport ReminderList from '../ReminderList/ReminderList';\nimport Locker from 'lockr';\nimport {Tooltip} from 'antd'\n\nlet oneDay = 60 * 60 * 24 * 1000;\nlet todayTimestamp = Date.now() - (Date.now() % oneDay) + (new Date().getTimezoneOffset() * 1000 * 60);\nlet inputRef = React.createRef();\n\nexport default class MyDatePicker extends Component {\n\n  /**\n   *  Core\n   */\n\n  daysMap = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  monthMap = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'];\n\n  constructor() {\n    super();\n    let date = new Date();\n    let year = date.getFullYear();\n    let month = date.getMonth();\n    this.state = {\n      getMonthDetails: [],\n      year,\n      month,\n      selectedDay: todayTimestamp,\n      monthDetails: this.getMonthDetails(year, month),\n      reminderList: Locker.get('reminderList') || [],\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(prevState.reminderList !== this.state.reminderList){\n      this.setState({\n        reminderList: Locker.get('reminderList')\n      })\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('click', this.addBackDrop);\n    this.setDateToInput(this.state.selectedDay);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', this.addBackDrop);\n  }\n\n  addBackDrop = e => {\n    if (this.state.showDatePicker && !ReactDOM.findDOMNode(this).contains(e.target)) {\n      this.showDatePicker(false);\n    }\n  };\n\n  showDatePicker = (showDatePicker = true) => {\n    this.setState({showDatePicker});\n  };\n\n  getDayDetails = args => {\n    let date = args.index - args.firstDay;\n    let day = args.index % 7;\n    let prevMonth = args.month - 1;\n    let prevYear = args.year;\n    if (prevMonth < 0) {\n      prevMonth = 11;\n      prevYear--;\n    }\n    let prevMonthNumberOfDays = this.getNumberOfDays(prevYear, prevMonth);\n    let _date = (date < 0 ? prevMonthNumberOfDays + date : date % args.numberOfDays) + 1;\n    let month = date < 0 ? -1 : date >= args.numberOfDays ? 1 : 0;\n    let timestamp = new Date(args.year, args.month, _date).getTime();\n    return {\n      date: _date, day, month, timestamp, dayString: this.daysMap[day],\n    };\n  };\n\n  getNumberOfDays = (year, month) => {\n    return 40 - new Date(year, month, 40).getDate();\n  };\n\n  getMonthDetails = (year, month) => {\n    let firstDay = (new Date(year, month)).getDay();\n    let numberOfDays = this.getNumberOfDays(year, month);\n    let monthArray = [];\n    let rows = 6;\n    let currentDay = null;\n    let index = 0;\n    let cols = 7;\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        currentDay = this.getDayDetails({\n          index, numberOfDays, firstDay, year, month,\n        });\n        monthArray.push(currentDay);\n        index++;\n      }\n    }\n    return monthArray;\n  };\n\n  isCurrentDay = day => {\n    return day.timestamp === todayTimestamp;\n  };\n\n  isSelectedDay = day => {\n    return day.timestamp === this.state.selectedDay;\n  };\n\n  getDateFromDateString = dateValue => {\n    let dateData = dateValue.split('-').map(d => parseInt(d, 10));\n    if (dateData.length < 3) return null;\n\n    let year = dateData[0];\n    let month = dateData[1];\n    let date = dateData[2];\n    return {year, month, date};\n  };\n\n  getMonthStr = month => this.monthMap[Math.max(Math.min(11, month), 0)] || 'Month';\n\n  getDateStringFromTimestamp = timestamp => {\n    let dateObject = new Date(timestamp);\n    let month = dateObject.getMonth() + 1;\n    let date = dateObject.getDate();\n    return dateObject.getFullYear() + '-' + (month < 10 ? '0' + month : month) + '-' + (date < 10 ? '0' + date : date);\n  };\n\n  setDate = dateData => {\n    let selectedDay = new Date(dateData.year, dateData.month - 1, dateData.date).getTime();\n    this.setState({selectedDay});\n    if (this.props.onChange) {\n      this.props.onChange(selectedDay);\n    }\n  };\n\n  updateDateFromInput = () => {\n    let dateValue = inputRef.current.value;\n    let dateData = this.getDateFromDateString(dateValue);\n    if (dateData !== null) {\n      this.setDate(dateData);\n      this.setState({\n        year: dateData.year,\n        month: dateData.month - 1,\n        monthDetails: this.getMonthDetails(dateData.year, dateData.month - 1),\n      });\n    }\n  };\n\n  setDateToInput = (timestamp) => {\n    let dateString = this.getDateStringFromTimestamp(timestamp);\n    inputRef.current.value = dateString;\n  };\n\n  onDateClick = day => {\n    this.setState({selectedDay: day.timestamp}, () => this.setDateToInput(day.timestamp));\n    if (this.props.onChange) {\n      this.props.onChange(day.timestamp);\n    }\n  };\n\n  setYear = offset => {\n    let year = this.state.year + offset;\n    let month = this.state.month;\n    this.setState({\n      year, monthDetails: this.getMonthDetails(year, month),\n    });\n  };\n\n  setMonth = offset => {\n    let year = this.state.year;\n    let month = this.state.month + offset;\n    if (month === -1) {\n      month = 11;\n      year--;\n    } else if (month === 12) {\n      month = 0;\n      year++;\n    }\n    this.setState({\n      year, month, monthDetails: this.getMonthDetails(year, month),\n    });\n  };\n\n  renderCalendar() {\n    let days = this.state.monthDetails.map((day, index) => {\n      return (<>\n        <div className={'c-day-container ' + (day.month !== 0 ? ' disabled' : '') + (this.isCurrentDay(day) ? ' highlight' : '') + (this.isSelectedDay(day) ? ' highlight-green' : '')} key={index}>\n          <div className='cdc-day'>\n            <span className={'active'} onClick={() => this.onDateClick(day)}>\n                {day.date}\n\n            </span>\n            <br />\n             <p>\n               {this.state.reminderList.find(it => it.selectedDate === day.timestamp)?.items?.length > 0 && <Tooltip style={{background: 'transparent', color: '#000'}} title={<div>\n                 {this.state.reminderList.find(it => it.selectedDate === day.timestamp)?.items?.map(it =>  <div className={'mb-2'}>\n                   <p>\n                     {it?.item}\n                   </p>\n                   <p className={'d-flex flex-row align-items-center'}>\n                     <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"13\" height=\"13\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                       <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n                       <circle cx=\"12\" cy=\"11\" r=\"3\" />\n                       <path d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 0 1 -2.827 0l-4.244-4.243a8 8 0 1 1 11.314 0z\" />\n                     </svg>\n                     <div className=\"px-1\"/>\n                     {it?.location}\n                   </p>\n                   <p className={'d-flex flex-row align-items-center'}>\n                     <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon icon-tabler icon-tabler-map-pin\" width=\"13\" height=\"13\" viewBox=\"0 0 24 24\" strokeWidth=\"1.5\" stroke=\"#FFF\" fill=\"none\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                       <path stroke=\"none\" d=\"M0 0h24v24H0z\" />\n                       <circle cx=\"12\" cy=\"12\" r=\"9\" />\n                       <polyline points=\"12 7 12 12 15 15\" />\n                     </svg>\n                     <div className=\"px-1\"/>\n\n                     {it?.time}\n                   </p>\n                 </div>)}\n               </div>}>\n                 <span style={{background: 'transparent', color: '#222'}}>\n                                    {this.state.reminderList.find(it => it.selectedDate === day.timestamp) ? '...' : ''}\n\n                 </span>\n               </Tooltip>}\n             </p>\n\n          </div>\n\n        </div>\n\n      </>);\n    });\n\n    return (<div className='c-container'>\n      <div className='cc-head'>\n        {['SUN', 'MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT'].map((d, i) => <div key={i} className='cch-name'>{d}</div>)}\n      </div>\n      <div className='cc-body'>\n        {days}\n      </div>\n    </div>);\n  }\n\n  render() {\n    return (<div className='MyDatePicker'>\n      <div className='mdp-input' onClick={() => this.showDatePicker(true)}>\n        <input type='date' onChange={this.updateDateFromInput} ref={inputRef} />\n      </div>\n      <div className='mdp-container'>\n        <div className='mdpc-head'>\n          <div className='mdpch-button'>\n            <div className='mdpchb-inner' onClick={() => this.setYear(-1)}>\n              <span className='mdpchbi-left-arrows' />\n            </div>\n          </div>\n          <div className='mdpch-button'>\n            <div className='mdpchb-inner' onClick={() => this.setMonth(-1)}>\n              <span className='mdpchbi-left-arrow' />\n            </div>\n          </div>\n          <div className='mdpch-container'>\n            <div className='mdpchc-year'>{this.state.year}</div>\n            <div className='mdpchc-month'>{this.getMonthStr(this.state.month)}</div>\n          </div>\n          <div className='mdpch-button'>\n            <div className='mdpchb-inner' onClick={() => this.setMonth(1)}>\n              <span className='mdpchbi-right-arrow' />\n            </div>\n          </div>\n          <div className='mdpch-button' onClick={() => this.setYear(1)}>\n            <div className='mdpchb-inner'>\n              <span className='mdpchbi-right-arrows' />\n            </div>\n          </div>\n        </div>\n        <div className='mdpc-body'>\n          {this.renderCalendar()}\n\n        </div>\n\n      </div>\n      <ReminderList selectedDate={this.state.selectedDay} />\n\n\n    </div>);\n  }\n\n}\n","import React from 'react';\nimport './App.css';\nimport DatePicker from './component/DatePicker/DatePicker';\n\nfunction onChange(timestamp) {\n  console.log(timestamp);\n}\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <DatePicker onChange={onChange}/>\n\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}